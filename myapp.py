# -*- coding: utf-8 -*-
"""Tugas Besar - Visualisasi Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17pYIwYMEBgKqs_Eocjm2ZpiooKzGosjf

#Final Project Assignment

##Visualisasi Data IF-42-GAB01 [IKN]

Nama Anggota Kelompok:
*   Liyan Fajar Ramadhan
*   Hanif Reangga
*   Irfani Adri Maulana

#Final Project
"""

# Data handling
import pandas as pd
import numpy as np

# Bokeh libraries
from bokeh.io import output_file, output_notebook, curdoc
from bokeh.plotting import figure, show
from bokeh.models import ColumnDataSource
from bokeh.layouts import row, column, gridplot
from bokeh.models.widgets import Tabs, Panel

"""Data set yang digunakan pada tugas besar 2 ini adalah data time series dari beberapa<br>
parameter saham yang terdiri dari:<br>
* Date: Tanggal pengambilan data
* Adjusted Close: Harga penutupan yang telah disesuaikan
* Volume: Jumlah transaksi
* High: Harga maksimum dalam periode waktu yang diberikan
* Low: Harga minimum dalam periode waktu yang diberikan
* Open: Waktu ketika stock mulai trading
* Close: Waktu ketika stock mengakhiri trading
* Name: Indeks pasar saham
"""

data = pd.read_csv('data/NYSE.csv', parse_dates=['Date'])
data

data["Name"] = "NYSE"

data1 = pd.read_csv('data/NASDAQ.csv', parse_dates=['Date'])
data1

data1["Name"] = "NASDAQ"

data

data1

frame = [data, data1]

df = pd.concat(frame)
df

#
df['Name'].unique()

newdf = df
newdf = newdf.sort_values(['Date', 'Name'])
newdf.head()

# Isolate the data 
nyse = newdf[newdf['Name'] == 'NYSE']
nasdaq = newdf[newdf['Name'] == 'NASDAQ']

output_notebook()

# Output to file
output_file('index.html', 
            title='Nilai Adjusted Close, Volume, High untuk setiap indeks pasar saham')

# Create a ColumnDataSource object
nyse_cds = ColumnDataSource(nyse)
nasdaq_cds = ColumnDataSource(nasdaq)

tooltips = [('Name', '@Name'), ('Adjusted Close', '$y{0.2f}'), ('Volume', '$y{0.2f}'), ('High', '$y{0.2f}')]

# Create and configure the figure
fig_adj = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Nilai Adjusted Close untuk setiap indeks pasar saham',
             x_axis_label='Date', y_axis_label='Adjusted Close', tooltips=tooltips)

fig_volume = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Nilai Adjusted Close untuk setiap indeks pasar saham',
             x_axis_label='Date', y_axis_label='Volume', tooltips=tooltips)

fig_high = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Nilai Adj CLose untuk setiap indeks pasar saham',
             x_axis_label='Date', y_axis_label='Day_Perc_Change', tooltips=tooltips)

# Render Adjusted Close
fig_adj.line('Date', 'Adjusted Close', 
         color='red', legend_label='NYSE',
         line_width=1, 
         source=nyse_cds)
fig_adj.line('Date', 'Adjusted Close', 
         color='blue', legend_label='NASDAQ', 
         line_width=1,
         source=nasdaq_cds)

# Render Volume
fig_volume.line('Date', 'Volume', 
         color='red', legend_label='NYSE',
         line_width=1, 
         source=nyse_cds)
fig_volume.line('Date', 'Volume', 
         color='blue', legend_label='NASDAQ', 
         line_width=1,
         source=nasdaq_cds)

# Render Volume
fig_high.line('Date', 'High', 
         color='red', legend_label='NYSE',
         line_width=1, 
         source=nyse_cds)
fig_high.line('Date', 'High', 
         color='blue', legend_label='NASDAQ', 
         line_width=1,
         source=nasdaq_cds)

# Move the legend
fig_adj.legend.location = 'top_left'
fig_volume.legend.location = 'top_left'
fig_high.legend.location = 'top_left'

# Add interactivity to the legend
fig_adj.legend.click_policy = 'hide'
fig_volume.legend.click_policy = 'hide'
fig_high.legend.click_policy = 'hide'

#Date Range Slider for Adjusted Close
date_slider_adj = DateRangeSlider(value=(min(newdf['Date']), max(newdf['Date'])),
                              start=min(newdf['Date']),end=max(newdf['Date']),width=300)
date_slider_adj.js_link('value', fig_adj.x_range, 'start', attr_selector=0)
date_slider_adj.js_link('value', fig_adj.x_range, 'end', attr_selector=1)

#Date Range Slider for Volume
date_slider_volume = DateRangeSlider(value=(min(newdf['Date']), max(newdf['Date'])),
                              start=min(newdf['Date']),end=max(newdf['Date']),width=300)
date_slider_volume.js_link('value', fig_volume.x_range, 'start', attr_selector=0)
date_slider_volume.js_link('value', fig_volume.x_range, 'end', attr_selector=1)

#Date Range Slider for High
date_slider_high = DateRangeSlider(value=(min(newdf['Date']), max(newdf['Date'])),
                              start=min(newdf['Date']),end=max(newdf['Date']),width=300)
date_slider_high.js_link('value', fig_high.x_range, 'start', attr_selector=0)
date_slider_high.js_link('value', fig_high.x_range, 'end', attr_selector=1)

#layout
layout_1 = row(date_slider_adj, fig_adj)
layout_2 = row(date_slider_volume, fig_volume)
layout_3 = row(date_slider_high, fig_high)

adj = Panel(child= layout_1, title='Adjusted Close')
vol = Panel(child= layout_2, title='Volume')
day = Panel(child= layout_3, title='High')

tabs = Tabs(tabs=[adj, vol, day])

# Run
curdoc().add_root(tabs)
